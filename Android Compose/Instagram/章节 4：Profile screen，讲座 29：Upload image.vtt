WEBVTT

00:00.990 --> 00:07.380
OK, so in this video, we're going to introduce the functionality that allows us, allows our users

00:07.380 --> 00:10.080
to upload a profile image.

00:10.680 --> 00:17.220
OK, so we're going to start off with the functionality in the view model.

00:17.310 --> 00:21.570
OK, so here down below, I'm going to create a new function.

00:23.000 --> 00:23.570
OK.

00:24.170 --> 00:27.530
Something called fun upload image.

00:28.040 --> 00:35.210
Now keep in mind, this needs to be a bit generic because we want to be able to upload both user profile

00:35.210 --> 00:38.010
images and post images.

00:38.030 --> 00:41.540
OK, so we want to upload the bus now.

00:41.570 --> 00:44.770
Upload image is going to take a you are eye of type.

00:44.780 --> 00:47.990
You are right and and on success.

00:50.490 --> 00:56.160
Lambda, that takes a new try and returns the units.

00:57.940 --> 00:58.330
OK.

00:58.570 --> 01:01.660
Let me import the you are all right, and that's it.

01:01.840 --> 01:08.260
All right, so in-progress is going to be the value is going to be true.

01:09.550 --> 01:11.800
Now we're going to have valid storage.

01:12.250 --> 01:14.710
Ref is going to be storage.

01:16.170 --> 01:17.400
Don't reference.

01:18.120 --> 01:25.440
Now, keep in mind that storage is fire based storage, which is the place where we can store images

01:25.440 --> 01:26.370
in Firebase.

01:26.580 --> 01:32.490
And the reason we need the reference is we need to give our name, our image a particular name.

01:33.180 --> 01:45.630
I'm going to have Val you uid equals uuid dot random you I.D. Val image ref is going to be storage ref.

01:48.810 --> 01:51.690
Storage, I call it red, that should be rough.

01:54.600 --> 02:03.690
OK, storage, ref, dot child, here I have images, which is kind of the folder where we're going

02:03.690 --> 02:06.750
to store our image $ UUID.

02:07.320 --> 02:13.770
OK, so the image name is going to be our UUID and the reference is going to be where we actually stored

02:13.770 --> 02:14.550
that information.

02:15.750 --> 02:23.670
We're going to have Val upload task equals image ref, dot put file.

02:25.900 --> 02:26.610
You are right.

02:27.770 --> 02:35.630
OK, and we can start to add listeners to this, upload the Tusk, so upload tasks that add on success.

02:36.820 --> 02:39.940
And then we're going to have add on Savior.

02:42.760 --> 02:51.040
OK, now for the success we're going to have vowel result equals it's dot metadata.

02:51.130 --> 02:56.740
Question mark, thought reference question mark because it's reliable download.

02:56.750 --> 02:57.700
You are out.

02:59.530 --> 03:02.770
OK, so we have our download URL.

03:02.860 --> 03:06.880
If we have a successful task, then result.

03:09.840 --> 03:14.250
Dot add on success listener.

03:15.240 --> 03:18.450
And here we can pass the on success.

03:19.170 --> 03:24.180
So basically what we're doing here is we're allowing whoever calls this function to decide what they

03:24.180 --> 03:27.600
do after we receive the download URL.

03:27.910 --> 03:31.090
OK, we want that to be for us.

03:31.110 --> 03:36.300
In this particular case, we want to store that you URL in the user information.

03:36.510 --> 03:41.040
But when we upload a post, for example, we want to store that URL in the post information.

03:41.730 --> 03:43.560
OK, so that allows us to do that.

03:43.560 --> 03:48.450
And then on, say, the listener, we can simply handle some exception.

03:48.480 --> 03:49.410
Let's give it a name.

03:49.900 --> 03:50.560
See?

03:51.210 --> 03:53.640
So our exception and.

03:54.610 --> 04:03.630
That's fine, we don't need to provide another message and we can set in progress dot value equals false.

04:05.470 --> 04:12.670
Now here we can use this upload image in our upload.

04:14.510 --> 04:15.260
Profile.

04:16.430 --> 04:25.070
Image two things I forgot to do, so first of all, I want to make this as private because this is kind

04:25.070 --> 04:26.180
of internal logic.

04:26.660 --> 04:32.090
Profile image And here I have set the in-progress value to true.

04:32.390 --> 04:35.270
I have made it false if we have an exception.

04:35.540 --> 04:40.020
But if we are successful, the operation is not yet completed.

04:40.040 --> 04:48.290
OK, so we're going to leave it as as true because the upload profile image will handle that later on.

04:48.320 --> 04:52.100
OK, so here we are, just getting a you are f type.

04:52.110 --> 05:01.760
You are right and we are calling upload image with our you are AI and we're providing a on success.

05:02.120 --> 05:04.090
So in all success, it's quite simple.

05:04.100 --> 05:11.060
We're simply going to call, create or update profile, and we're only going to pass our image URL as

05:11.060 --> 05:12.740
it does to string.

05:15.650 --> 05:20.720
OK, so very, very simple, since we already have the functionality for create our update profile,

05:20.900 --> 05:28.400
we can call that with only the image URL to update that in the backend API.

05:29.210 --> 05:36.380
So with that, we need to go now to our profile screen and implement the image functionality.

05:36.500 --> 05:44.900
So right at the bottom here somewhere, I'm going to add another composable font profile image that

05:44.900 --> 05:46.010
takes a few parameters.

05:46.010 --> 05:54.380
So image you are out of type string Lolabelle and a view model of the type Instagram View model.

05:56.640 --> 06:08.750
OK, now I'm going to have a box that will contain my information, so I have a modifier equals modifier

06:08.760 --> 06:09.840
dot height.

06:11.430 --> 06:16.010
And I'm going to call this intrinsic size dot men.

06:16.650 --> 06:21.930
The reason I want to do that is because I want to have some height even when the image does not yet

06:21.930 --> 06:23.310
exist, when it's loading.

06:23.520 --> 06:27.390
OK, so that is there for that reason.

06:27.420 --> 06:31.350
Now here inside the box, I want to have two things.

06:31.350 --> 06:33.150
First of all, I want to have a column.

06:35.130 --> 06:44.970
OK, and then I'm going to have a valve is loading equals VM Dot in progress, dot value.

06:46.320 --> 06:53.370
And then if it's loading, obviously I want to display a common progress spinner.

06:55.400 --> 07:01.520
OK, so that is the spin there, while the image is loading now, let's work a bit on the columns here.

07:01.790 --> 07:09.560
I want to have basically a rounded image and a text that says something like Change your profile image

07:09.560 --> 07:09.980
here.

07:10.520 --> 07:17.870
So I'm going to add a modifier equals modifier dot padding of eight dpi.

07:19.130 --> 07:22.220
I'm going to have Phil Max width.

07:23.300 --> 07:25.250
And I'm going to make it clickable.

07:25.790 --> 07:32.330
And in the clickable, we're going to fill out, fill this out a bit later because we need to do something

07:32.330 --> 07:33.290
a bit special here.

07:33.500 --> 07:43.040
We want to be able to launch the camera function in our Android device so that we can select an existing

07:43.070 --> 07:43.520
image.

07:44.830 --> 07:48.670
OK, now clickable, and then let's not forget.

07:49.860 --> 07:56.520
To add, the horizontal alignment equals alignment dots centre horizontally.

07:57.840 --> 08:00.870
Now inside this column, I'm going to have a card.

08:02.180 --> 08:06.770
That has a shape equals circular shape.

08:09.900 --> 08:10.440
OK.

08:12.090 --> 08:23.360
Then I have a modifier equals modifier dot padding of eight deep and size of 100 dpi.

08:24.750 --> 08:34.830
OK, and inside here I will simply have a common image with my data equals image you earl and down below

08:34.830 --> 08:35.400
the card.

08:35.640 --> 08:41.190
I'm going to have a text that says, Change your profile.

08:42.400 --> 08:43.690
Change profile.

08:45.640 --> 08:46.150
Picture.

08:48.710 --> 08:55.770
OK, I want to just quickly run this to make sure that our UI is set up correctly.

08:56.180 --> 09:05.750
And then once that is done, I want to implement this functionality for on Click Here, which is basically

09:05.750 --> 09:12.260
going to tie up our UI with the VM functionality.

09:12.890 --> 09:14.780
So clicking on profile.

09:16.550 --> 09:17.010
Oh, right.

09:17.030 --> 09:23.450
I don't actually call this profile image, so I'm going to go up here instead of my column.

09:23.750 --> 09:25.220
I'm going to say profile.

09:26.620 --> 09:27.130
Image.

09:30.230 --> 09:33.070
OK, I'm here, I'm going to pass the image URL.

09:34.880 --> 09:36.410
And the VM.

09:38.090 --> 09:43.340
The image URL can be retrieved from the VM, so I'm going to say.

09:44.120 --> 09:52.340
Image URL equals VM dot user data dot value dot image URL.

09:53.510 --> 09:55.130
With a question mark for value.

09:55.520 --> 09:58.940
So I think that should be fine.

09:58.970 --> 10:00.800
Let's go ahead and run the code again.

10:01.250 --> 10:05.000
And we should see the updated UI for the image here.

10:08.510 --> 10:09.590
And it profile.

10:13.030 --> 10:19.690
And then we have the image now, remember that I have already set the image here, so that is a good

10:19.690 --> 10:23.200
sign that we already have the image for our user.

10:23.470 --> 10:27.580
But if we click on it, nothing happens, even though it says change profile picture.

10:27.820 --> 10:33.430
So to update that, we're going to simply create a launcher.

10:33.520 --> 10:39.970
OK, so at the top here inside profile image, I'm going to have Val Launcher.

10:41.390 --> 10:46.190
Equals, remember, launcher for activity results.

10:47.500 --> 10:49.480
The contract is activity.

10:51.290 --> 10:53.750
Result contracts dot.

10:54.170 --> 10:56.090
Get content.

10:57.980 --> 10:58.320
OK.

10:58.340 --> 11:03.050
This is a function, and on results, I have some functionality.

11:05.930 --> 11:11.210
Now, for the on result, I can actually extract that outside my function.

11:12.300 --> 11:16.770
Call, so I'm going to pass it here, OK?

11:16.980 --> 11:20.220
And this will give me a you are eye of type, you are I.

11:23.030 --> 11:27.770
OK, and with this, you are right, it's quite simple, we can say you are, I question mark thought,

11:27.770 --> 11:36.650
let's so if it's not, no, we will simply call VM Dot update, profile image and profile data.

11:38.170 --> 11:40.190
No, it should be profile image.

11:41.650 --> 11:45.940
What did we call it, upload profile image?

11:47.690 --> 11:51.220
Yes, upload.

11:53.460 --> 11:58.080
Profile image there it is, upload profile image with our you are right.

11:58.410 --> 12:00.720
And we need to call this launcher, of course.

12:00.720 --> 12:05.670
So here in the image, click in the box clickable.

12:05.970 --> 12:09.690
We're going to have our launcher.

12:11.990 --> 12:13.010
Dot launch.

12:13.610 --> 12:20.770
And here we need to retrieve types of data image for slash star.

12:21.050 --> 12:24.920
So any type of image needs to be retrieved with this launcher.

12:25.340 --> 12:26.440
So that's pretty much it.

12:26.480 --> 12:30.950
The launcher will basically retrieve an image from the device for us.

12:31.190 --> 12:34.400
We'll call upload image with the you are right.

12:34.760 --> 12:41.270
The upload image will basically call this upload image function, which will store the image in the

12:41.270 --> 12:42.410
Firebase storage.

12:42.680 --> 12:49.940
And then we'll call, create or update profile, which will update our profile and then set our data

12:49.940 --> 12:50.480
here.

12:51.750 --> 12:53.310
User data again.

12:53.670 --> 12:59.010
And then once that is set, the profile will refresh and we will get the new information.

12:59.490 --> 13:03.300
So let's hope that we haven't made any mistake.

13:03.690 --> 13:04.590
It should be fine.

13:04.590 --> 13:06.990
Let's go ahead and test our application.

13:11.970 --> 13:14.010
All right, so click on profile.

13:14.250 --> 13:22.140
Now we have the image, now let's go click here and you can see that it has opened the image for us.

13:22.350 --> 13:26.790
And let me select this image, for instance, select uploading.

13:27.210 --> 13:29.790
Once that is done, I'm going to go back to profile.

13:31.630 --> 13:34.000
It takes a while for me to upload for some reason.

13:41.110 --> 13:44.000
OK, so it seems I have made a small mistake.

13:44.020 --> 13:52.090
I have a little bug in code after some debugging, I found that here in upload image instead of add

13:52.090 --> 13:56.350
on success listener with curly brackets, I need a function call.

13:58.070 --> 13:59.390
Off on success.

14:00.200 --> 14:03.000
OK, so I think that should solve the problem.

14:03.020 --> 14:09.710
Let's go ahead and run the code again, and hopefully this time it works because I do see that the image

14:09.710 --> 14:19.340
is uploaded to Firebase Storage, but not updated in the user profile, so that will likely solve the

14:19.340 --> 14:19.640
problem.

14:20.090 --> 14:22.460
OK, let's upload an image.

14:23.060 --> 14:23.960
There's a spinner.

14:24.410 --> 14:29.390
So hopefully once that is uploaded, then no more issues after that.

14:30.470 --> 14:30.980
There we go.

14:30.990 --> 14:35.630
So update that up got up there and the image got updated as well.

14:35.810 --> 14:37.070
Keep in mind for this.

14:37.070 --> 14:41.210
We don't need to save because the image is already updated.

14:41.210 --> 14:45.920
So if we go back here, we will see the new image appear here as well.

14:46.400 --> 14:51.110
So that's all for this video uploading user information.

14:51.380 --> 14:57.200
And actually, that's quite an important piece of functionality because we will use it when we will

14:57.770 --> 15:00.020
upload post images as well.
