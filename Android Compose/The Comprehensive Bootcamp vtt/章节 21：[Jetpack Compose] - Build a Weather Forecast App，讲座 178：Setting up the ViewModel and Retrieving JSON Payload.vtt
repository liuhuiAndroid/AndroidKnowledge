WEBVTT

00:01.320 --> 00:08.460
So now that we have a main view model, let's see if we can call on U.S. state our main view model,

00:08.730 --> 00:10.770
so we can actually see something, hopefully.

00:11.490 --> 00:17.670
So before we do that, let's go back to the main navigation.

00:17.670 --> 00:21.780
So again, so control command or control e, right?

00:22.170 --> 00:28.860
And I'm going to see navigation, sea navigation, very good weather, navigation.

00:29.690 --> 00:32.190
For this to work, we need to, of course, pass.

00:33.330 --> 00:37.770
Around our main view model through our composable here.

00:39.650 --> 00:40.850
So it's very simple.

00:41.600 --> 00:47.810
All I do, I'm going to create a foul call view what's called mean view model as such.

00:48.910 --> 00:58.130
I mean, if you model your model type, I'm going to say hilt view, model a section and then we need

00:58.130 --> 01:01.850
to pass the type in the angle brackets.

01:02.360 --> 01:05.420
So it is going to be a main view model like this.

01:05.690 --> 01:11.750
OK, so then this main view model, we're going to pass it through or around quite a few model.

01:16.110 --> 01:23.230
I mean, if you Monomoy such and then it will need to add parameter in main screen of our view model.

01:23.250 --> 01:30.390
So if you go, there are no command, click can see if your model is added as such and what are we going

01:30.390 --> 01:30.650
to do?

01:30.660 --> 01:32.040
Can instantiate it right away.

01:32.310 --> 01:35.260
I say hilt a model like this.

01:36.300 --> 01:41.280
But before we move forward, there's something that I've noticed when we look at our object.

01:41.640 --> 01:42.510
Let's go back.

01:43.020 --> 01:49.230
We're passing this weather object as the type for our data or exception, the actual data.

01:49.890 --> 01:50.490
Let's look at it.

01:51.090 --> 01:53.730
This is the wrong one to pass around.

01:53.880 --> 01:59.220
The reason being is because we want to receive this whole payload.

02:00.030 --> 02:06.240
Now, if you look at the weather object, we have description icon ID mean, that's not exactly what

02:06.450 --> 02:07.380
this represents.

02:07.950 --> 02:15.000
That will represent this actual weather object that is inside of this weather array or list.

02:15.210 --> 02:18.880
So that's not what we are expecting to receive right away.

02:18.880 --> 02:22.110
He just tells me that I've made a mistake and we need to rectify that.

02:22.260 --> 02:22.890
How do we do that?

02:23.340 --> 02:26.280
Well, let's go to our start with the repository.

02:26.850 --> 02:30.870
What we want to do, I want to make sure that instead of whether object, we need to pass something

02:30.870 --> 02:32.460
else, let's go back to our models.

02:33.060 --> 02:37.380
Let's look at our weather weather, right?

02:37.440 --> 02:44.370
This is the payload that we need to pass or receive, which then, you know, a list in this case is

02:44.370 --> 02:46.720
going to be a list of weather objects.

02:46.740 --> 02:48.210
So if you go here.

02:50.180 --> 02:57.260
You'll see that we have this list, which contains this payload here, this object containing all of

02:57.260 --> 03:03.150
the information like dirty temps and so forth, which is exactly what we want, whether item.

03:03.170 --> 03:06.470
So if you combined, click this is that payload.

03:07.310 --> 03:11.360
OK, and then we have a weather which has that weather object list.

03:12.170 --> 03:15.080
So this is a structure, right stake?

03:15.080 --> 03:15.680
That's OK.

03:16.310 --> 03:19.850
At least we've looked at it before a disaster.

03:20.450 --> 03:21.790
So let me get rid of that.

03:21.830 --> 03:26.660
So anywhere else, we're where we're passing new data exception instead of whether we're going to pass

03:26.680 --> 03:30.590
the weather like that, OK, we're going to have some problems.

03:31.220 --> 03:36.680
That just means we're going to go to get weather and instead of weather, object is also going to be

03:36.680 --> 03:37.160
weather.

03:38.540 --> 03:42.680
Right, class, let's see what else, let's get rid of that.

03:44.200 --> 03:47.110
I object to it any that and.

03:49.130 --> 03:50.210
Repository.

03:51.490 --> 03:52.810
It's whether that's very good.

03:53.080 --> 03:57.940
So let's go ahead and run real quick just to make sure we're not going to see anything really changing

03:57.940 --> 04:02.860
much, but at least we want to make sure that we didn't break the app.

04:08.300 --> 04:09.920
There's one that are missing here.

04:11.520 --> 04:14.220
Let's go up here where they're upset, right?

04:14.490 --> 04:15.690
Let's change that to weather.

04:18.240 --> 04:19.290
OK, let's try it again.

04:24.370 --> 04:25.420
All right, so there we go.

04:25.630 --> 04:26.590
Everything is set up.

04:27.400 --> 04:34.030
Listen, we know that the types that we are receiving, it's is the correct type which will resemble

04:34.240 --> 04:35.840
this entire payload.

04:35.860 --> 04:37.210
Not just what's inside.

04:39.410 --> 04:43.670
All right, so let's go ahead and test to see if we can get something from our API.

04:45.680 --> 04:47.720
So back so we still remain here.

04:47.750 --> 04:54.620
What I'm going to do, actually, is I'm going to create another composable here, just a test composable

04:55.580 --> 05:00.980
and we'll see a fun show data such.

05:01.430 --> 05:02.180
We'll get to that.

05:02.900 --> 05:10.360
And I'm going to get all of that and put the cat all of that input in there.

05:10.670 --> 05:10.910
OK.

05:11.740 --> 05:16.160
And inside here, this is where I'm going to call the show data, which is testing and what I'm going

05:16.160 --> 05:16.450
to do.

05:16.460 --> 05:24.650
I'm actually pass on main view model as such, and then we'll have to add that show the main view model

05:24.650 --> 05:25.730
into our show data.

05:25.970 --> 05:26.180
OK.

05:26.810 --> 05:35.930
So inside here is where we are going to check, to see and actually to get our main view model and see

05:35.930 --> 05:41.960
if we can get some data now because the way we structure our view model, you notice that here we have

05:41.960 --> 05:47.680
this mutable state that's wrapped inside of actually we have this data or exception.

05:47.700 --> 05:51.440
It's wrapped instead of multiple state in order for this to work.

05:51.470 --> 05:58.700
We'll have to make sure that we produce that state right in our view model on this case and our main

05:58.700 --> 06:02.570
screen so that we can get the data that we need.

06:03.500 --> 06:04.770
What I mean by that is as follows.

06:04.770 --> 06:12.920
So in this case here, I'm going to have to say, Val, let's call this weather data such and I'm going

06:12.920 --> 06:15.260
to invoke to produce state as such.

06:16.040 --> 06:21.500
Now, initial value of this produce state is going to be something I want to add in a second.

06:21.860 --> 06:28.280
Now, before we move forward and we're going to pass the type that this produce state will have to expect,

06:28.490 --> 06:33.590
which is going to be our data or exception type like this.

06:34.040 --> 06:43.310
And it's going to be a weather type first and a Boolean and an exception e like that.

06:44.240 --> 06:45.650
OK, very good.

06:46.250 --> 06:47.240
And so we'll continue.

06:47.390 --> 06:50.030
Our initial value here is going to be.

06:51.980 --> 06:53.360
Data or exception?

06:54.870 --> 06:56.550
And I'm going to pass loading.

06:59.180 --> 07:00.200
To be true.

07:03.910 --> 07:10.030
And then for our producer here, because it's their last function that has been passed, I'm going to

07:10.030 --> 07:12.310
just use the lambda trailing lambda.

07:13.390 --> 07:15.940
So instead, here this is where the state is produced.

07:15.940 --> 07:21.430
In fact, you can see this is the produce state scope, which is going to be a dinner exception.

07:21.430 --> 07:23.200
Typekit we're going to be setting up.

07:23.200 --> 07:23.830
We're getting here.

07:23.860 --> 07:24.940
So I see value.

07:25.330 --> 07:26.290
Notice the value.

07:26.530 --> 07:29.350
It's going to be passed implicitly.

07:29.680 --> 07:33.790
We've seen a bit tape, which is going to be data reception type.

07:35.050 --> 07:36.580
OK, so how do we get that?

07:36.590 --> 07:37.480
We're going to set that.

07:37.780 --> 07:45.430
Well, I'm going to use view model that we're getting main view model that is and I'm going to go ahead

07:45.430 --> 07:51.530
and say that data like this and get the value very good.

07:52.480 --> 07:57.700
And then, of course, I'm going to go and say, get the value actual value to finalize our weather

07:57.880 --> 07:58.300
data.

07:59.270 --> 07:59.690
Very good.

08:00.350 --> 08:02.970
So now is this weather data.

08:02.990 --> 08:10.010
It's going to be a state that has been produced by calling produced state, we pass all of this information.

08:10.320 --> 08:10.530
OK.

08:11.300 --> 08:16.310
And the initial value is going to be loading because we're saying data exception loading is true.

08:17.440 --> 08:20.650
And then we are passing on a main view model.

08:20.860 --> 08:22.600
Get the data right.

08:24.300 --> 08:30.210
And then pass that into this value inside of this produced state, and then we invokes that failure

08:30.210 --> 08:35.730
to get the actual value once the state has been produced, we should, which should have some information.

08:36.690 --> 08:43.140
So next, we're going to do is let's go ahead and put in a brief statement and say if weather data that

08:43.140 --> 08:46.710
loading is true, what are we going to do?

08:46.740 --> 08:57.780
I'm going to put a circle progress indicator else if in this case, weather data that data the actual

08:57.780 --> 09:00.030
weather object is not.

09:03.240 --> 09:09.960
No such thing in this case, I'm just going to go ahead and cut that and put that inside.

09:11.070 --> 09:17.220
And I'm just going to say here weather data data.

09:19.400 --> 09:24.200
And I say to strength, so it's just going to get the data object and put it into a string.

09:24.740 --> 09:27.170
In fact, let's go even further, let's say data.

09:28.010 --> 09:33.560
Let's get C.T. and get the country.

09:34.870 --> 09:39.220
They will need to wrap it all to make it work like that.

09:40.810 --> 09:41.140
All right.

09:41.830 --> 09:47.980
So show data has been called there inside where we have instantiated, of course, our main view model.

09:49.310 --> 09:50.900
Let's see if this works, let's go ahead and run.

09:57.810 --> 09:58.290
All right.

09:58.390 --> 10:01.980
Looks like he keeps running and running, and we don't know when it stops.

10:03.020 --> 10:07.790
OK, let's stop this and maybe do some debugging.

10:07.820 --> 10:08.660
We see nothing.

10:08.690 --> 10:10.370
Let's go to our Logcat.

10:11.450 --> 10:13.010
And you can see that or get.

10:14.450 --> 10:24.140
Whether I see this is from or whether I see what this will say, it shows nothing but somewhere in our

10:24.140 --> 10:25.520
main view model.

10:29.110 --> 10:35.350
We say get we're not getting and we're getting something, but it says no, wait without getting anything.

10:35.650 --> 10:36.550
What's the problem?

10:38.230 --> 10:40.720
OK, let's go to our main repository.

10:40.870 --> 10:43.150
This is where everything happens, really.

10:43.480 --> 10:47.440
The layer that connects to the actual retrofit.

10:47.890 --> 10:52.180
And instead of the exception here, let's see if we can log.

10:54.750 --> 10:59.580
Something the exception that may happen because something is not right, that's passive.

10:59.650 --> 10:59.940
We

11:03.480 --> 11:06.510
just put something gibberish like this, so to differentiate.

11:08.000 --> 11:15.260
In this run, this hopefully, we can see the log, see if something is not right or what is it that

11:15.260 --> 11:15.800
is not right.

11:17.440 --> 11:18.280
OK, very good.

11:18.820 --> 11:26.560
So looking at our logs, it says, Rex Whyalla, this is what we have and we have a problem, says Jason.

11:26.560 --> 11:29.290
Syntax exception Java Lang No exception.

11:29.860 --> 11:32.350
Expected end, but was zero point seven eight.

11:32.620 --> 11:39.880
OK, so looks like we have some issues in our data and models that is expecting a different type, but

11:39.880 --> 11:40.870
is getting something different.

11:41.470 --> 11:49.150
What I usually like to do is copy this zero point seven eight and we know that on May four, in our

11:49.150 --> 11:52.600
main view model, we pass in Seattle.

11:52.610 --> 11:53.770
That's what we should get.

11:53.860 --> 11:54.610
Let's go to.

11:57.030 --> 12:00.480
Our payload here and it is Seattle very good.

12:00.930 --> 12:07.030
And what I'm going to do is, say Command F to find in when a paste that eight.

12:07.050 --> 12:10.020
OK, so now I see you have this pop.

12:10.260 --> 12:17.280
This is the field which is inside of one of these list like objects is actual weather.

12:17.850 --> 12:26.100
So that means then let's look in our data, in our models as models, I should say, to see what type

12:26.550 --> 12:28.160
do we have set for pop?

12:29.040 --> 12:29.460
OK.

12:29.790 --> 12:32.700
Because that seems to be the problem, says here Jabba Lang.

12:32.700 --> 12:36.600
No format exception expected an intimate found in this case, a double.

12:38.220 --> 12:44.760
Let's go to our models and let's click whether that's not where the pop is weather item.

12:45.450 --> 12:45.900
A-ha.

12:46.260 --> 12:50.040
So there's a pop pop here is somehow an int.

12:51.170 --> 12:54.470
But what is been expected is actually a double.

12:55.010 --> 12:56.940
So that means then we need to change this.

12:56.960 --> 12:58.280
I don't know what happens.

12:59.030 --> 13:06.740
Sometimes happens the plug in probably fetched the wrong type and it was added in into instead of a

13:06.740 --> 13:07.180
double.

13:07.190 --> 13:08.060
That was the problem.

13:08.660 --> 13:10.250
OK, well, I hope that was the problem.

13:10.250 --> 13:11.150
That was the only problem.

13:11.660 --> 13:17.600
And let's go ahead and run again to see if this is going to be solved and hopeful can see something.

13:24.520 --> 13:25.180
And voila!

13:25.330 --> 13:28.330
So even though this keeps going, that's fine.

13:28.930 --> 13:31.230
It looks like we have a winner here.

13:31.240 --> 13:38.740
Something is now working, which is good, so we're getting the correct payload, get the city and everything

13:38.740 --> 13:39.610
is good.

13:39.850 --> 13:40.180
All right.

13:40.180 --> 13:42.070
So now we're getting the information we want.

13:42.100 --> 13:47.110
So the score from this inside, just inside Walla, it's working.

13:47.560 --> 13:49.090
OK, let's ignore this for now.

13:49.570 --> 13:56.220
In fact, we could snap all together and that means than in our view model.

13:56.230 --> 14:00.220
This is being called actually in our repository.

14:01.700 --> 14:06.380
This has been called and are getting data there in our view model, let's see.

14:06.410 --> 14:09.500
Get weather, OK?

14:09.830 --> 14:14.150
Also, get weather is still novel, but that's fine.

14:14.510 --> 14:16.100
It's probably because we're outside.

14:16.100 --> 14:21.380
That's OK, so we're able to get that information, which is exactly what we want.

14:22.460 --> 14:24.250
Now we see we have a little problem here.

14:24.320 --> 14:30.860
The problem is that when we use our weather data, we are invoking main view model that data in this

14:30.860 --> 14:38.990
dead data here is actually a vowel which is mutable state that we created earlier and so forth.

14:39.000 --> 14:44.930
So we have a little problem here because things are not being set up the way we want.

14:45.200 --> 14:52.100
First of all, at this point, this data is going to be empty or it's going to be null because we instead

14:52.100 --> 14:57.560
of this, get value or get weather and we had the city and we have the view, model, scope and so forth.

14:58.400 --> 15:02.630
And when we log this data value, it is indeed null.

15:02.660 --> 15:09.260
That's why you see that we always get weather, which is this good weather or rather either one of these,

15:09.770 --> 15:10.970
we get that null.

15:11.780 --> 15:17.120
Now, to simplify our lives because this would work in different circumstances, especially for testing.

15:17.120 --> 15:22.820
And we don't want that to simplify our lives because all we want to do is to invoke the get weather

15:22.940 --> 15:27.140
data in past a CD and so forth and go from there what we can do.

15:27.140 --> 15:29.180
Instead, I'm going to get rid of all of this.

15:29.210 --> 15:29.810
Yes.

15:29.810 --> 15:31.280
Yes, I know, I know, I know.

15:31.280 --> 15:33.860
But it's OK instead of what I'm going to do.

15:34.720 --> 15:36.080
We go all of that.

15:36.090 --> 15:37.850
As I said, let's stop this.

15:37.850 --> 15:40.400
So we don't see that happening there.

15:41.060 --> 15:44.240
And also, I'm going to get rid of this as well.

15:44.630 --> 15:48.200
And all I'm going to do, I'm going to put a suspend function here.

15:48.200 --> 15:53.690
Such call get weather data like this and we're past a city.

15:54.500 --> 16:01.190
It's going to be a string and this is going to return a data or exception.

16:01.760 --> 16:03.350
It's going to be weather object.

16:04.160 --> 16:08.330
Essentially, what we had before boolean an exception.

16:11.040 --> 16:11.320
OK.

16:11.970 --> 16:12.270
All right.

16:12.570 --> 16:21.390
So all I'm going to do, I say return like this repository where the repository invoked again, whether

16:21.600 --> 16:25.620
in pass the city or city query and pass our city, that's been passed.

16:25.980 --> 16:27.090
And there we go.

16:27.600 --> 16:33.390
This is most similar because we know that when we call get weather data, it's going to return the type

16:33.390 --> 16:37.110
that we want, which is much easier to deal with than what we had before.

16:38.200 --> 16:39.670
And it simplifies everything.

16:40.600 --> 16:47.020
And now when we go to our main screen, this should work, but we have to change a few things.

16:47.320 --> 16:52.060
Notice if you model that data no longer works because we don't have that variable.

16:52.420 --> 16:52.720
OK.

16:53.050 --> 16:57.130
Instead, we're going to go ahead and call that get weather and pass the city.

16:57.670 --> 17:05.500
In this case, I'm just passing Seattle right to start with, and now everything else stays the same.

17:07.670 --> 17:13.940
And while the main screen USA, that's wonderful, so now it works perfectly, which is exactly what

17:13.940 --> 17:14.360
we want.

17:15.490 --> 17:17.140
OK, so very simple.

17:17.170 --> 17:19.400
We have to get weather past City.

17:19.660 --> 17:26.440
It's going to return a type which is easier to grasp because remember, even in our main screen here,

17:26.440 --> 17:32.020
when we say weather data and get to produce state right, we're expecting a type that is being passed

17:32.020 --> 17:32.370
along.

17:32.490 --> 17:39.850
It's easier to deal with instead of going straight to a field that we had added before at the top.

17:40.090 --> 17:41.090
This is much easier.

17:41.380 --> 17:44.770
And I believe this is the best way to do what we want to do.

17:45.370 --> 17:47.170
And I can see we can get that object.

17:47.680 --> 17:50.710
In fact, for good, the main screen here can get more than that.

17:50.770 --> 17:58.180
Let's just go in and get data that string so it can see the whole thing or say, Let's go ahead and

17:58.180 --> 17:58.560
run.

17:58.630 --> 18:00.700
I guess I didn't have to have to string, but it's OK.

18:02.670 --> 18:03.090
Very good.

18:03.360 --> 18:03.740
Voila!

18:04.140 --> 18:07.240
Now I'm able to get the entire payload.

18:07.260 --> 18:12.840
I can't scroll up and down because it's just I don't have a column in this case, a lazy column.

18:13.260 --> 18:15.900
But now I get the whole thing right.

18:15.990 --> 18:19.890
The whole payload, which is exactly what we need, what we want.

18:20.310 --> 18:23.760
This is not helpful, of course, but you can see that things are actually working.

18:26.350 --> 18:31.180
I even if I change this to, let's say, Moscow.

18:35.610 --> 18:40.830
You can see it, says Moscow, it's in Russia and so forth, so what it was change here.

18:41.160 --> 18:45.480
Let's say Portland now we have to run this.

18:48.810 --> 18:49.980
And you can see.

18:50.100 --> 18:53.610
Yes, Portland population and all the data that we want.

18:54.180 --> 18:54.680
Wonderful.

18:54.690 --> 18:56.610
So it is indeed working.

18:56.610 --> 18:57.960
We had to tweak a few things.

18:57.960 --> 18:59.340
We had to debug a few things.

18:59.640 --> 19:01.650
But that's what we do as developers.

19:02.490 --> 19:08.430
So make sure I hope you are able to get to see it with some data showing, which is very important because

19:08.430 --> 19:11.280
now that we have the data, we can do all sorts of things.
