WEBVTT

00:01.380 --> 00:07.110
So we've added who created in this case, our weather API or interface say that this is going to be

00:07.110 --> 00:09.490
used internally by retrofit.

00:09.510 --> 00:11.730
So where is this retrofit thing?

00:11.820 --> 00:14.520
Where is it it and how do we do that?

00:15.270 --> 00:21.960
Well, the beauty again, is that we are going to use or you've been using the dye dependency injection.

00:22.320 --> 00:29.430
That means that instead of a dye module here, this is where we are going to create those providers

00:29.730 --> 00:35.160
that will allow for that dependency injection that we're talking about, which means we can then initialize

00:35.160 --> 00:41.850
certain classes or providers or dependencies that the app will need in the background to set everything

00:41.850 --> 00:42.360
up for us.

00:42.960 --> 00:49.230
But before we do that, we need to say at module to make sure that is indeed is a dagger module.

00:49.740 --> 00:57.450
And then I'm going to also say at install in dagger like this and want to just pass a singleton component

00:58.200 --> 01:02.430
that class like this to set this up module class.

01:03.270 --> 01:07.320
So inside here, like I said, it's where we set up all the app modules.

01:07.320 --> 01:13.380
The margins that are needed across the entire application to create things such as databases in this

01:13.380 --> 01:16.320
case are also repositories.

01:17.250 --> 01:23.640
Anything else that we need that we know we need across the entire application that we can create, instantiate

01:23.640 --> 01:28.080
the providers here, which then any part of the app can access it.

01:28.620 --> 01:29.580
So what we want to do?

01:29.790 --> 01:35.940
Well, we want to create a provider, a way of providing the open weather API.

01:36.360 --> 01:43.440
So in this case, do you think she'd retrofit so we can use the base URL in past this weather API that

01:43.440 --> 01:45.060
we created to rid of all this?

01:45.420 --> 01:47.190
So use our weather API and so forth.

01:47.250 --> 01:55.500
So very simply, because it's down all we do look at this, I'm going to say at.

01:57.390 --> 02:03.600
Provides might to say that dagger is going to provide the following statement or function and elsewhere

02:03.600 --> 02:04.800
make this a singleton.

02:05.610 --> 02:09.870
And then when I say funds, they provide notice the naming right.

02:10.170 --> 02:14.070
Remember, we're not going to use this function directly.

02:14.430 --> 02:19.110
Dagger and hilt dependency, module dependency and everything in the background.

02:19.170 --> 02:21.930
It is what is going to get this information.

02:22.080 --> 02:27.750
This function called is this function a background in creating this dependency for us, right?

02:28.050 --> 02:33.360
Let's say provide open whether API, something like this.

02:33.930 --> 02:40.030
And of course, it's going to be instantiating or it's going to be invoking the weather API because

02:40.050 --> 02:41.310
that's what we need, right?

02:43.020 --> 02:43.360
Section.

02:43.980 --> 02:46.320
And then that's what I'm going to return.

02:46.320 --> 02:49.110
In this case, I invoke the retrofit.

02:49.440 --> 02:53.160
Now I know that this is working because we have added a dependency.

02:53.460 --> 02:57.330
If you don't see that retrofit, then you know that dependency didn't.

02:57.330 --> 02:58.590
You didn't add a dependency.

02:58.860 --> 03:03.750
So go back to the previous video where I show you how to add there's dependencies or just go to the

03:04.200 --> 03:05.920
repo and get those dependencies.

03:05.970 --> 03:07.280
Very important, right?

03:07.640 --> 03:09.330
That then builder.

03:10.140 --> 03:14.250
And then I'm going to continue adding a few things to our retrofit built here.

03:14.490 --> 03:16.110
First of all, we need a base URL.

03:16.510 --> 03:16.740
Hmm.

03:16.830 --> 03:17.620
Where do we get that?

03:17.640 --> 03:19.070
Well, we get it from a constants.

03:19.580 --> 03:21.630
Remember our constants?

03:21.630 --> 03:23.880
Obviously, there get the base URL.

03:24.210 --> 03:24.690
Very good.

03:25.200 --> 03:28.020
Next, I'm going to add a converter factory.

03:28.170 --> 03:33.720
This is important because retrofit needs to also convert all of that information.

03:33.720 --> 03:41.380
All of this JSON that we're getting here into actual objects that can be taken and used as objects in

03:41.380 --> 03:42.990
the sense Kotlin objects.

03:43.140 --> 03:43.410
Right.

03:44.040 --> 03:49.260
So it's important to add this adapter factory, which we can use by saying JSON

03:51.870 --> 03:53.790
converter factory like that.

03:55.090 --> 04:04.840
And say that create right and then got built, and then that's I forget to say, create in order to

04:04.840 --> 04:11.530
create, we need to pass a a model class per se, which is our weather API, so it knows exactly what

04:11.530 --> 04:18.250
to do when we are creating this provide open weather API like that.

04:18.640 --> 04:20.950
This has to be added convertor.

04:21.310 --> 04:21.760
There we go.

04:21.790 --> 04:22.630
Factory like this.

04:22.630 --> 04:24.250
This way was giving me some issues.

04:25.410 --> 04:26.460
And there you go again.

04:26.550 --> 04:32.670
We are not ourselves going to call this provide open weather API dagger and hilt in the background.

04:32.670 --> 04:39.120
Once we build and run this, it will know to create all the classes that it needs to create this dependency

04:39.120 --> 04:45.720
to create a retrofit, all the glasses in the playground that needs to be used by retrofit so that we

04:45.720 --> 04:50.970
can then in conjunction with our weather API here, to be able then to say, get weather and pass all

04:50.970 --> 04:55.800
of these parameters of the squares and indeed get this information here.

04:55.920 --> 05:03.570
As I have to add, there will be converted into JSON object, which essentially is going to be this

05:03.570 --> 05:03.930
case.

05:03.930 --> 05:05.820
Codling objects, right?

05:06.300 --> 05:12.390
So it's going to map everything with these object models that we created earlier there.

05:13.020 --> 05:15.270
That is the beauty of retrofit.

05:17.310 --> 05:20.550
And, of course, this case dependency injection with hilt and dagger.

05:21.030 --> 05:25.110
OK, so we have a wrap module, weather app API.

05:25.470 --> 05:25.950
Life is good.

05:26.640 --> 05:26.970
So.

05:28.050 --> 05:33.540
It's time for us to look at the repository, although repositories are not necessary, but it's always

05:33.540 --> 05:38.700
a good idea to have repositories because then we can have a one single source of truth.

05:38.890 --> 05:44.100
Right, where we have this layer of data where we can get from different places.

05:44.100 --> 05:50.010
So it's a nice structural settings for especially when you're putting together or trying to get data.

05:50.070 --> 05:56.640
So when you create a repository here, it's just a class repository.

05:57.710 --> 05:58.680
Why such?

05:59.990 --> 06:00.330
Very well.

06:00.900 --> 06:05.370
So what is our weather repository going to do well or whether we're positive we're going to do is it's

06:05.370 --> 06:08.280
going to allow us to get the data.

06:08.460 --> 06:09.360
But where from?

06:09.450 --> 06:16.950
Well, it's going to allow us to get data from our directly from our let's go to our network, our weather

06:16.950 --> 06:23.940
API, which means we are going to want to have access to this get weather in this case to implement

06:24.270 --> 06:31.860
this, get weather function here, which incidentally, as you see, it's part of a retrofit.

06:32.070 --> 06:37.890
So when we call this retrofit, we'll know how to handle it because we'll ask for query units if need

06:37.890 --> 06:40.860
be updates already retrieved or added.

06:41.160 --> 06:44.790
And then we're going to return to a weather object, which again, if you remember.

06:44.910 --> 06:46.860
Yes, it's all of this payload.

06:48.440 --> 06:52.010
So you can see all these building blocks coming together, hopefully.

06:52.550 --> 06:52.880
All right.

06:53.150 --> 06:54.920
We can't just get rid of that real quick here.

06:55.280 --> 06:57.450
So now what do we need to do?

06:57.470 --> 07:03.770
This is where the dependency injection really works, because now I can say at inject, it can inject

07:03.770 --> 07:04.760
certain dependencies.

07:05.120 --> 07:08.090
They injected such a constructor.

07:08.120 --> 07:10.540
We're going to see private valve.

07:11.300 --> 07:16.670
And it's going to be our API, which is our weather API as such.

07:17.180 --> 07:23.300
And so now I have access this API, which is our weather API so I can have access to indeed.

07:23.840 --> 07:28.500
So we can't have access to the weather API again if you go back.

07:28.520 --> 07:29.450
We have access to this.

07:29.450 --> 07:30.140
Get weather.

07:31.540 --> 07:32.120
Huh.

07:32.200 --> 07:32.590
Very good.

07:33.070 --> 07:37.960
So what do we do inside here, where this is, where we do the work and this is where we actually get

07:37.960 --> 07:38.470
the weather?

07:38.660 --> 07:43.120
It's not going to create another suspend function and because they get whether it can name whatever

07:43.120 --> 07:45.640
we want, but it's always customary to name the same names.

07:45.640 --> 07:47.470
So there is consistency there.

07:48.040 --> 07:51.090
And then here I'm going to pass a city, right?

07:51.100 --> 07:58.600
I'm going to say, city query this and it's going to be a string and then say units.

08:00.490 --> 08:04.000
He's also going to be a string that suffices for now.

08:04.480 --> 08:08.350
And what is that I'm going to expect to receive?

08:08.890 --> 08:09.760
This is the question.

08:10.300 --> 08:14.590
Well, what I'm going to be expecting to receive, obviously, it's going to be a whether object.

08:14.800 --> 08:18.520
So I can say whether object as we created earlier.

08:19.060 --> 08:19.730
That's fine.

08:20.500 --> 08:27.160
But we want something more elaborate because we want to be able to wrap this, whether object into something

08:27.160 --> 08:30.370
a little bit more than just a way of their object.

08:30.730 --> 08:37.370
What I mean by that is because we want to make sure that as this object, we get this whether object

08:37.370 --> 08:43.180
to this payload, we want to make sure to also add other metadata like downloading if it's loading,

08:43.180 --> 08:44.690
if there's an exception and so forth.

08:44.710 --> 08:51.610
So what are we going to do is we're going to create yet another class, right, another wrapper class

08:51.940 --> 08:52.930
in our data here.

08:52.960 --> 08:53.800
It's very simple.

08:56.900 --> 09:01.040
And I'm going to call this data or exception.

09:01.880 --> 09:07.340
And the reason, like I said, is because we want to always be able to have a class that we can add

09:07.340 --> 09:13.670
more information regarding the process, which networking in this case and when we are dealing with

09:13.670 --> 09:15.590
the receiving data from someone else.

09:15.920 --> 09:16.240
Right.

09:16.250 --> 09:18.740
Internet or database or file and so forth.

09:19.100 --> 09:24.980
So it's always a good idea to wrap, create a wrapper class such as this, or we can pass information

09:25.100 --> 09:28.070
more than just that information that we are receiving.

09:28.820 --> 09:32.720
So this is going to include some generics, you know, generics.

09:32.720 --> 09:33.820
It's a huge topic.

09:33.830 --> 09:39.860
The idea is that I'm going to make this class so general in a sense that we can pass any type we want.

09:40.340 --> 09:47.450
So we are going to use T as a template and then Boolean such and the E for exception.

09:47.600 --> 09:49.790
So what does that really mean?

09:50.000 --> 09:55.820
Well, it means that for our parameters here, I'm going to wait for data.

09:55.830 --> 10:00.140
It's going to be of type T that we are passing and can be null.

10:01.040 --> 10:07.160
It also means that our VAR I can pass a loading parameter here, which is going to be a Boolean type,

10:07.370 --> 10:09.110
whether it's loading or not.

10:09.500 --> 10:11.210
And this can also be null.

10:11.930 --> 10:17.390
Aha and I can pass another e for exception just e like that.

10:18.200 --> 10:21.200
And it can also be null like this.

10:21.980 --> 10:22.410
OK.

10:22.850 --> 10:23.420
And that's all.

10:23.840 --> 10:25.520
And I don't even need to have a body.

10:26.510 --> 10:31.940
So that just means now if I wrap anything with our data or exception, I can pass.

10:31.940 --> 10:38.570
In this case, T could be whether object could be Pallo as an object could be James and so forth.

10:38.960 --> 10:39.920
And you can pass a Boolean.

10:40.100 --> 10:42.650
It will be interpreted as the loading this case.

10:42.650 --> 10:47.540
If it's true, that means it's floating, if not true, that mean it's not loading and so forth.

10:47.540 --> 10:50.840
So data, now it's going to be whatever we pass as a T here.

10:51.140 --> 10:57.290
Whether object has a set or anything else, exception is going to be e going to pass as our arguments

10:57.290 --> 10:57.860
and so forth.

10:58.160 --> 11:09.020
So now instead of having this, I'm going to wrap this inside of our data or exception like that, which

11:09.020 --> 11:15.710
means I can now say for our data here, I'm going to pass over whether object and which is pass any

11:15.710 --> 11:20.300
boolean for loading and press exception that we may get.

11:21.770 --> 11:24.860
Of course, we have a little problem here because we have to return something.

11:25.550 --> 11:25.880
All right.

11:26.000 --> 11:28.160
So now we do the work.

11:28.310 --> 11:34.010
So I'm going to say, Val responds, We're expecting put that inside of a try.

11:34.310 --> 11:36.920
There's a catch because things could happen.

11:37.190 --> 11:38.540
This is going to be an exception.

11:39.260 --> 11:41.510
And what do we do here, inside?

11:41.510 --> 11:42.810
Well, inside here.

11:42.830 --> 11:43.670
All I have to do.

11:43.700 --> 11:50.330
Look how beautiful I'm going to invoke the weather API, which I have access to because I'm doing using

11:50.330 --> 11:52.670
the dependency injection we are.

11:52.710 --> 11:57.890
We have injected the app weather API, which knows how to get data through retrofit.

11:58.220 --> 11:58.820
Wonderful.

11:59.210 --> 12:05.120
I say API as such and when I say get weather passed, the query which is a string, what do I get?

12:05.120 --> 12:07.070
That is just a silly query like this.

12:08.170 --> 12:15.240
And then if something happens, sometimes things happen here, I'm going to say return data.

12:15.940 --> 12:22.600
Look at this inside here, I'm going to for our E, which is indeed the exception.

12:23.200 --> 12:27.120
I'm going to say it is going to be equal to E, which is the exception.

12:27.130 --> 12:36.550
Now I am loading our data or exception wrapper class inside of this values you variable or argument

12:36.550 --> 12:42.460
e for exceptions are going to have the exception we receive if something happens and elsewhere to return

12:43.660 --> 12:44.170
data.

12:45.450 --> 12:52.800
Or exception, you know, when I pass inside of our data, which accepts the type, which is our response.

12:53.610 --> 12:57.360
And this works because the response is indeed whether object that it's needed.

12:58.540 --> 13:00.310
Right, data response.

13:00.460 --> 13:00.970
There we go.

13:01.540 --> 13:02.140
Does that make sense?

13:03.470 --> 13:10.130
So now we've gained a lot notice that we can overload or add other metadata, and we need like exception.

13:10.340 --> 13:10.880
There it is.

13:11.120 --> 13:12.970
And we had a data response.

13:12.980 --> 13:20.990
So now when we get call, when we get to call, get whether we're going to expect this type, which

13:20.990 --> 13:23.780
will potentially hopefully have the whether object.

13:24.110 --> 13:28.100
But most importantly, also we have the bullion an exception, if need be.

13:28.490 --> 13:33.530
It's not that we have a repository we could call directly and get that information, but what are we

13:33.530 --> 13:34.070
going to do?

13:34.130 --> 13:39.800
We're going to call or create a view model because that's how we treat our data.

13:40.080 --> 13:45.260
We want to use a view model to get that information onto our user interface.

13:45.710 --> 13:47.150
Now where do we use our review model?

13:47.180 --> 13:48.650
Well, what do we create their view model?

13:48.680 --> 13:51.310
Well, our review model is going to be inside of our screens.

13:51.320 --> 13:53.680
For now, I'm just going to create instead remain here.

13:53.720 --> 13:54.860
Create a new view model.

13:59.330 --> 14:03.740
It's just a class call, main view model.

14:04.460 --> 14:10.730
And it's important to remember that this few model, it's important to say it's a hilt with a model

14:11.120 --> 14:19.820
like that because we will need to do a few other things I say at also inject because we need what we

14:19.820 --> 14:21.290
need to repository remember.

14:21.650 --> 14:22.760
So constructor.

14:25.890 --> 14:26.740
Sort of publicly.

14:26.760 --> 14:27.810
Just get rid of that.

14:29.010 --> 14:31.580
I make sure this is indeed a fuel model.

14:33.350 --> 14:37.760
The problem is that I made this a Java class, OK?

14:37.790 --> 14:38.310
My bad?

14:38.330 --> 14:42.020
Let's just get rid of that altogether.

14:43.490 --> 14:44.720
She be more careful.

14:44.870 --> 14:46.760
Let's create codling class.

14:46.790 --> 14:47.150
Here we go.

14:47.150 --> 14:51.410
It's a class main view model.

14:52.640 --> 14:53.230
There we go.

14:53.240 --> 14:56.510
Make sure that is indeed a hilt view model.

14:57.740 --> 14:59.690
It's very important now should work something.

14:59.690 --> 15:01.460
See at inject.

15:01.930 --> 15:05.540
OK, constructor private val

15:07.550 --> 15:13.700
repository where the repository such and let's not forget that this is indeed.

15:15.270 --> 15:21.420
A few Model T view model and or life cycle like that.

15:22.680 --> 15:32.100
OK, so now here what we do is we create a structure that will allow us to get the information we want.

15:32.940 --> 15:35.880
So first, I'm going to create a file called data.

15:37.020 --> 15:40.590
And this is going to be a mutable.

15:42.110 --> 15:49.790
State type of data or exception, exceptionally, it's going to be a very long, but it's OK, it's

15:49.790 --> 15:55.430
going to be a weather type object, let's say, right, because we need to have that.

15:55.520 --> 16:00.980
It's going to be a Boolean pass, an exception like this.

16:01.580 --> 16:03.710
And then we're going to set it to something.

16:03.890 --> 16:10.250
So it's going to be immutable state of and here I, you say, data or exception.

16:12.520 --> 16:21.490
And just pass the say no for the object, true for loading, an exception which is going to create a

16:21.490 --> 16:22.780
simple exception.

16:22.780 --> 16:23.740
Here it six.

16:24.520 --> 16:30.730
And and passing something like that.

16:31.610 --> 16:37.180
This immutable state mutable state of all right.

16:37.240 --> 16:37.580
There we go.

16:37.600 --> 16:42.830
So what I'm doing here, creating a variable that's going to be the correct type, right, which is

16:42.850 --> 16:43.900
data or exception.

16:44.230 --> 16:45.220
You know, have to initialize it.

16:45.220 --> 16:48.040
But most importantly, we also wrap it around immutable state.

16:48.070 --> 16:48.360
It is.

16:48.370 --> 16:50.410
It has to be a state variable.

16:52.180 --> 17:03.700
Right next, I'm going to create the next block there, and I'm going to call load, whether it's go

17:03.700 --> 17:13.840
ahead and create function load, whether and this load, whether all is going to do is call, get weather

17:14.440 --> 17:19.960
and pass, for instance, Seattle and we haven't created that either.

17:20.050 --> 17:22.810
It's going to create that to bottom there.

17:23.650 --> 17:24.260
I could see it.

17:25.870 --> 17:32.770
Well, this is going to require a few model scope because we need that because we're going to be calling

17:32.770 --> 17:38.140
a suspend function, view, model, scope, invoke, launch and inside here.

17:38.170 --> 17:38.950
I can say.

17:40.180 --> 17:51.010
If City, that we passing that is empty, right, then just going to return nothing.

17:51.410 --> 18:00.470
OK, now another case when, say, data that value and what I said to loading to true, to say it is

18:00.470 --> 18:04.390
floating ha and then data that value.

18:06.460 --> 18:06.760
OK.

18:07.630 --> 18:13.840
When a use repository, look at this and get whether and then when it passed city query when it passed

18:13.840 --> 18:16.540
the city as such.

18:17.650 --> 18:27.790
And I can say if data here that value that data began to get inside and get, let's say, to string.

18:31.130 --> 18:33.620
Is not empty.

18:34.880 --> 18:38.840
Then once the data that value that loading.

18:42.690 --> 18:43.560
Is false.

18:45.060 --> 18:49.590
And of course, I'm with you logged here just to show you that something is happening, hopefully.

18:51.030 --> 18:51.930
Let's see.

18:54.180 --> 19:02.310
Data and value and data again to a string just to get the whole payload.

19:03.700 --> 19:08.540
They get four attack soap did a lot of things we came to view model here.

19:08.840 --> 19:15.400
We created a data object that's immutable state wrapped around a dinner or exception and so forth.

19:15.410 --> 19:21.740
We instantiate that has to be middle immutable say of and then we have a neat block here which calls

19:21.920 --> 19:25.920
out which calls load weather, which in turn here.

19:25.920 --> 19:30.350
And that's where we get the repository call get weather passed.

19:30.350 --> 19:33.190
The query, which is the seed in this case, Seattle, right here.

19:33.200 --> 19:34.070
We do all the work.

19:34.070 --> 19:40.490
So what's happening also is that we are using the data this got here mutable, and we're setting a few

19:40.490 --> 19:46.000
things that we're saying that the loading Boolean is going to be true to say that it's loading.

19:46.010 --> 19:52.220
So in our front end, in our view, we can also look at it and say, OK, it's loading, which means

19:52.220 --> 19:57.480
we can show something to the user to let them know that something is loading, right?

19:57.480 --> 19:58.460
And that is being fetched.

19:58.970 --> 20:06.140
And then we're going to go and actually fetch data so and set out to our data that value added value

20:06.140 --> 20:08.750
in this case is going to be this guy here object.

20:09.800 --> 20:10.130
Right.

20:11.490 --> 20:13.380
We're setting things up in our upper class.

20:14.600 --> 20:16.620
And we check if there is empty.

20:16.910 --> 20:22.700
That means we the loading is finished, so loading is false, which means we can just get out of there

20:23.420 --> 20:28.250
and we're now just going to go ahead and see if we can get some data from our object.

20:29.860 --> 20:35.590
Right in log it very well, so hopefully we did everything right in the next video, we're going to

20:35.590 --> 20:41.380
explore or call this main view model there and see if we can get some information.
