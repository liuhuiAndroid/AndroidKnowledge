WEBVTT

00:00.390 --> 00:06.640
There's one more concept that I believe we need to really understand, at least have some ideas about

00:06.650 --> 00:12.720
the lambdas that will be very helpful, especially if we are going to talk about compose or we're going

00:12.720 --> 00:15.130
to go and explore it and compose.

00:15.150 --> 00:20.100
But even if you aren't going to do and compose this concept, it's really, really interesting and important.

00:20.370 --> 00:26.070
This concept that I'm going to be talking about is called trailing lambda to explain to you what trailing

00:26.070 --> 00:27.000
lambda is.

00:27.030 --> 00:32.370
Well, first of all, we have to understand that you can pass functions as parameters to a function,

00:32.640 --> 00:33.300
as you see here.

00:33.690 --> 00:36.570
So you see at the top, we have fun enhanced message, right?

00:36.570 --> 00:41.370
And then we have message as a string and then we have this fun as parameter.

00:41.790 --> 00:47.190
So it is a function that we're passing as a parameter instead of enhanced message function.

00:47.400 --> 00:51.510
So this whole function here returns an integer, but that's not that important at this point.

00:51.720 --> 00:57.330
So you see then in the body of this function, remember this is not a lambda at the top there at all.

00:57.510 --> 01:01.530
It's just a normal function that we're passing a function parameter.

01:01.710 --> 01:04.110
And so we then print a message which we're passing.

01:04.290 --> 01:10.830
And then we also print the fun as parameter function where the contents of it.

01:11.160 --> 01:17.170
Notice that, of course, this fun as parameter, we turns into not the enhanced message, but the parameter

01:17.200 --> 01:20.130
function that is in the past is actually returning an integer.

01:20.400 --> 01:22.200
OK, so how would we call this?

01:22.350 --> 01:23.070
It's very simple.

01:23.070 --> 01:25.170
We call by saying enhance the message.

01:25.170 --> 01:28.320
We passed the message Hello Paolo or Hello, James.

01:28.680 --> 01:28.980
All right.

01:29.340 --> 01:32.580
And then you notice something interesting here and then we have a lambda.

01:32.790 --> 01:33.990
How is it even possible?

01:33.990 --> 01:39.300
Well, Kotlin allows you to do so because if you put, this is a very, very crucial.

01:39.390 --> 01:46.110
If you put a function as a parameter and that function as a parameter is the last thing or the last

01:46.110 --> 01:50.430
parameter that has been passed, then we can actually invoke a lambda, right?

01:50.940 --> 01:56.040
In other words, according to Cartland convention, if the last parameter of a function is a function

01:56.040 --> 02:02.220
in this case, then a lambda expression passed as the corresponding argument can be placed outside the

02:02.220 --> 02:03.000
parentheses.

02:03.330 --> 02:09.150
If you look at enhanced audio, we call it enhanced or pass in Halo Paolo and outside of the parenthesis,

02:09.210 --> 02:15.450
we just go ahead and call the lambda and pass another function that will return because he has returned

02:15.450 --> 02:21.170
an integer because we said the finest parameter has shown an integer so we can pass either just a number

02:21.180 --> 02:21.550
there.

02:21.570 --> 02:27.420
I just chose to pass the Add 12 to get one for that function we passing instead of on a call here.

02:27.420 --> 02:29.880
This lambda is just could be anything.

02:29.920 --> 02:33.540
OK, as long as it returns any integer, because that is the contract we have.

02:33.720 --> 02:35.160
And why is this an important concept?

02:35.160 --> 02:41.010
Because now this is important concept again, to really understand is because in jetpack compose, this

02:41.010 --> 02:42.650
is used extensively.

02:42.660 --> 02:47.370
So let's go ahead and actually write this same function here so we can actually see how it all works.

02:47.700 --> 02:48.780
I think that would be helpful.

02:49.020 --> 02:49.330
All right.

02:49.350 --> 02:50.190
Let's go ahead and do it.

02:50.260 --> 02:57.510
So it's just a normal function called is enhanced message as such, and we're going to pass a message

02:57.630 --> 02:58.470
of typed string.

02:58.710 --> 03:02.010
And then here is the fun part being a pass here, a function.

03:02.310 --> 03:07.530
And I'm going to say fun just to be descriptive as parameter.

03:08.140 --> 03:09.450
It's like this.

03:09.750 --> 03:13.170
And this is going to be, of course, a function that returns.

03:13.530 --> 03:18.540
In this case, an integer could return nothing, but we're going to go with the integer, right?

03:18.780 --> 03:20.550
So inside here, we're not going to do much.

03:20.610 --> 03:25.640
All we're going to do is going to say Print, Alan, and I'm going to pass the message back.

03:25.710 --> 03:29.820
Let's just put all inside of double quotes and say, pass the message.

03:29.820 --> 03:36.120
We're passing right arguments, and then I'm also going to pass the function as such because I know

03:36.120 --> 03:39.090
this is going to return an integer so I can actually call it.

03:39.150 --> 03:42.870
So this is what are we doing here calling the function and go from there?

03:42.930 --> 03:46.710
So let's make sure because we're calling this function.

03:47.010 --> 03:49.950
Let's put that inside of the braces there.

03:49.980 --> 03:54.960
So we actually say we're calling the result that we're getting when we call this fun mass parameter,

03:54.990 --> 03:55.960
it's turning into.

03:55.980 --> 03:57.110
So we expect to get an end.

03:57.450 --> 03:57.710
OK.

03:58.110 --> 04:03.900
So nothing really out of this world other than having this fun as parameter passing a function.

04:04.410 --> 04:09.390
When we go to call this function, we can say enhanced message and we pass our message.

04:09.390 --> 04:16.800
And this case is going to say hello there and I could go ahead and pass a function here that would do

04:16.980 --> 04:23.040
whatever we want to do, and we could go ahead here and pass the actual function that we said needs

04:23.040 --> 04:24.120
to go as a parameter.

04:24.660 --> 04:29.340
That's fine, but we're not going to do that because we've been leveraged trailing lambda in Kotlin.

04:29.730 --> 04:38.100
That means which says if the parameter is a function right being passed on a function and is the last

04:38.100 --> 04:45.390
parameter, then we don't need to put anything inside a parenthesis, meaning we can just go outside

04:45.390 --> 04:49.800
of parenthesis, do a lambda like this or open up the curly braces.

04:50.310 --> 04:56.970
Now one thing you will notice, especially when we're using Android Studio or any idea the difference

04:56.970 --> 04:59.520
between lambda and just normal curly.

05:00.160 --> 05:06.370
You see, is that this Calabrese here, because it's just a function, normal function, it's not as

05:06.370 --> 05:08.470
bold as a lambda expression there.

05:08.770 --> 05:09.820
OK, very good.

05:09.970 --> 05:14.440
Now we're going to have a problem here because since we're saying fine as parameter and there's our

05:14.440 --> 05:16.720
lambda, it has, we have to pass.

05:16.930 --> 05:22.570
Of course, what it needs to return, which in this case, it's going to be a number so I can say 12

05:22.570 --> 05:23.170
and notice.

05:23.210 --> 05:23.800
Life is good.

05:24.070 --> 05:26.110
If I find this, we should see 12.

05:26.140 --> 05:27.220
Actually, we're going to see.

05:27.250 --> 05:28.090
Hello there.

05:28.150 --> 05:28.660
12.

05:28.960 --> 05:29.650
Very cool.

05:29.860 --> 05:35.830
Now the beauty here, look at this because we know we're passing this fun as parameter there.

05:36.340 --> 05:40.020
We can call any function as long as it returns.

05:40.030 --> 05:40.420
What?

05:40.540 --> 05:41.410
Yes, an integer.

05:41.590 --> 05:43.630
I happen to have the add function.

05:43.780 --> 05:46.200
In fact, this ad man.

05:46.900 --> 05:48.110
We created a long time ago.

05:48.130 --> 05:49.180
It's another lambda.

05:49.570 --> 05:50.530
I look at the beauty.

05:50.740 --> 05:53.210
So this lambda here you can see we're passing.

05:53.230 --> 05:57.200
These are the types two times and we have two parameters in the body.

05:57.220 --> 05:59.770
So we just adding those two numbers very convenient.

05:59.920 --> 06:04.960
So now I can say 12 12, such if I run this, I should see Hello.

06:05.110 --> 06:05.770
24.

06:05.980 --> 06:06.400
Voila!

06:06.850 --> 06:07.720
That's very neat.

06:08.140 --> 06:08.920
Very, very neat.

06:09.490 --> 06:09.760
OK.

06:09.980 --> 06:11.500
And of course, I can do all sorts of things here.

06:11.740 --> 06:14.350
So this is what we call trailing lambda.

06:14.620 --> 06:20.740
Remember, for this to work, the function has to have as a parameter, the last parameter has to be

06:20.740 --> 06:22.420
a function in this function.

06:22.690 --> 06:24.370
This is a requirement.

06:24.520 --> 06:29.140
Look, if we want it, we could also pass something inside of this finance parameter, let's say, when

06:29.140 --> 06:30.550
it pass a string like that.

06:30.880 --> 06:35.500
OK, then I have a problem because right when you do that, of course, here I'm going to pass something

06:35.500 --> 06:39.780
like, Hey, for now, right when we do that, look what happens.

06:39.790 --> 06:41.050
You probably saw this earlier.

06:41.320 --> 06:47.620
It's we have that implicit eity string, which we know that we have access to that.

06:47.800 --> 06:48.640
How cool is that?

06:48.820 --> 06:53.290
So here I can just see, for instance, print it like that.

06:53.290 --> 06:56.980
If I run this, I'm going to say, Hey, there's hey, hello there.

06:56.980 --> 07:05.260
24 again, this is a very simplistic example, but it really showcases the trailing lambda concept here.

07:05.500 --> 07:10.600
You can imagine that you can create a function such as this a trailing lambda that will allow you to

07:10.840 --> 07:12.040
input some sort of data.

07:12.340 --> 07:14.860
And then it will take that data inside here.

07:15.160 --> 07:20.410
Pass that through another lambda or another function that we call here and do all sort of thing.

07:20.710 --> 07:20.950
OK.

07:21.160 --> 07:28.660
So if you continue this concept, you will see happening a lot in Android Jetpack, this concept of

07:28.660 --> 07:29.410
trailing lambda.

07:29.680 --> 07:36.910
You will find it being used extensively in the jetpack, compose and many other frameworks out there

07:36.910 --> 07:37.780
that use it.

07:38.050 --> 07:41.350
So take your time and understand this concept well.

07:41.350 --> 07:43.660
And if you don't get it right away, it's OK.

07:43.900 --> 07:49.540
But just keep in mind that trailing landers are used, and whenever you want a refresher, come back

07:49.540 --> 07:51.700
to this video that will be very helpful to you.

07:52.090 --> 07:52.870
OK, very well.

07:52.900 --> 07:53.980
I'll see you next time.
